{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9a8ed4be",
   "metadata": {},
   "source": [
    "write a python program to find the factiorial of a number\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d19bae1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# If the number is positive, we print an appropriate message"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6c49f917",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 3\n",
      "The factorial of 3 is 6\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a number: \"))\n",
    "factorial = 1\n",
    "# check if the number is negative, positive or zero\n",
    "if num < 0:\n",
    "    print(\"Sorry, factorial does not exist for negative numbers\")\n",
    "elif num == 0:\n",
    "    print(\"The factorial of 0 is 1\")\n",
    "else:\n",
    "    for i in range(1,num + 1):\n",
    "        factorial=factorial*i\n",
    "    print(\"The factorial of\",num,\"is\",factorial)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3f7f7d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "write a paython program to find whether a number is prime or composite"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f051df76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter any number:2\n",
      "2 number is prime but not composite number\n"
     ]
    }
   ],
   "source": [
    "n= int(input(\"Enter any number:\"))\n",
    "if(n ==0 or n == 1):\n",
    "    printf(n,\"Number is neither prime nor composite\")\n",
    "elif n>1 :\n",
    "    for i in range(2,n):\n",
    "        if(n%i == 0):\n",
    "            print(n,\"is not prime but composite number\")\n",
    "            break\n",
    "    else:\n",
    "        print(n,\"number is prime but not composite number\")\n",
    "else :\n",
    "    print(\"Please enter positive number only \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "537706d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "write a paython program to check whether a given string is plindrome or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51153b68",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def check_palin (str):\n",
    "\n",
    "              for i in range (0, int (len (str)/2)):\n",
    "\n",
    "                             if str [i] != str [len (str) -i-1]:\n",
    "\n",
    "                                            return False \n",
    "\n",
    "                             return True\n",
    "\n",
    "str_1 = input (“Enter a string.”)\n",
    "\n",
    "ans = check_palin (str_1)\n",
    "\n",
    "if (ans):\n",
    "\n",
    "              print (“Yes, it is a palindrome.”)\n",
    "\n",
    "else:\n",
    "\n",
    "              print (“No, it is not a palindrome.”)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e45792b",
   "metadata": {},
   "outputs": [],
   "source": [
    "write a paython program to get the third side of right-angled triangle from two given sides "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c9a8bb15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hypotenuse = 5.0\n",
      "Adjacent = 4.0\n",
      "Opposite = 3.0\n",
      "You know the answer!\n"
     ]
    }
   ],
   "source": [
    "def pythagoras(opposite_side,adjacent_side,hypotenuse):\n",
    "        if opposite_side == str(\"x\"):\n",
    "            return (\"Opposite = \" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))\n",
    "        elif adjacent_side == str(\"x\"):\n",
    "            return (\"Adjacent = \" + str(((hypotenuse**2) - (opposite_side**2))**0.5))\n",
    "        elif hypotenuse == str(\"x\"):\n",
    "            return (\"Hypotenuse = \" + str(((opposite_side**2) + (adjacent_side**2))**0.5))\n",
    "        else:\n",
    "            return \"You know the answer!\"\n",
    "    \n",
    "print(pythagoras(3,4,'x'))\n",
    "print(pythagoras(3,'x',5))\n",
    "print(pythagoras('x',4,5))\n",
    "print(pythagoras(3,4,5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5875d4f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "write a paython program to print the frequancy ofeach of the characters present in a given string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b5b66e42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str='Apple Mango Apple'\n",
    "str.count('Apple')\n",
    "str2='Apple'\n",
    "str.count(str2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63743f1b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
